"use client";

import React, { useMemo, useState } from "react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { Input } from "@/components/ui/input";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Separator } from "@/components/ui/separator";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Download, CheckSquare, CalendarDays, ListChecks, LucideDumbbell as Dumbbell, Salad, FileText, Sun, Timer, Droplets, Target, TrendingUp, Search, Menu, Calculator, BookOpen, Settings, Plus, Minus } from "lucide-react";

// ---------------------------------------------
// ⚙️ Data Model
// ---------------------------------------------
const pdfLinks = [
  { name: "Master Playbook (Complete)", href: "/six_pack_master_playbook_complete.pdf" },
  { name: "Master Playbook (Print‑Friendly)", href: "/six_pack_master_playbook_print.pdf" },
  { name: "Weekly Plan (Chart)", href: "/six_pack_weekly_plan.pdf" },
  { name: "Quick View (1‑page)", href: "/six_pack_quick_view.pdf" },
  { name: "Quick View + Snacks", href: "/six_pack_quick_view_with_snacks.pdf" },
  { name: "Mobile‑Friendly Version", href: "/six_pack_mobile_friendly.pdf" },
  { name: "Grocery Checklist", href: "/six_pack_grocery_list.pdf" },
  { name: "Weekly Tracking Sheet", href: "/six_pack_tracking_sheet.pdf" },
  { name: "4‑Week Tracking Sheet", href: "/six_pack_tracking_sheet_4weeks.pdf" },
  { name: "4‑Week + Progress Tracker", href: "/six_pack_tracking_sheet_4weeks_progress.pdf" },
  { name: "12‑Week Transformation Tracker", href: "/six_pack_tracking_sheet_12weeks_progress.pdf" },
  { name: "Calendar View (Minimalist)", href: "/six_pack_calendar_view.pdf" },
  { name: "Front Cover", href: "/six_pack_front_cover.pdf" },
  { name: "Playbook Cover (Workflow)", href: "/six_pack_playbook_cover.pdf" },
];

const breakfast = "5 whole eggs + 1 cup plain Greek yogurt + 1/2 cup berries + 1 tbsp chia/flax";

const days = [
  {
    day: "Mon",
    workout: {
      title: "Push (Chest/Shoulders/Triceps)",
      items: ["Bench Press — 5×5", "Overhead Press — 4×6–8", "Incline DB Press — 4×10", "Weighted Dips — 3×8–10", "Hanging Leg Raises — 3×12–15"],
    },
    meals: {
      breakfast,
      lunch: "8 oz chicken + 1 cup quinoa + broccoli & zucchini + 1 tbsp olive oil",
      dinner: "8 oz sirloin steak + Brussels sprouts & mushrooms + side salad",
    },
    note: "Heavy push strength",
  },
  {
    day: "Tue",
    workout: {
      title: "Pull (Back/Biceps)",
      items: ["Weighted Pull‑ups — 5×AMRAP", "Barbell Rows — 4×8–10", "Seated Rows — 3×10–12", "DB Curls — 3×12", "Planks — 3×1 min"],
    },
    meals: {
      breakfast,
      lunch: "8 oz salmon + 1 cup jasmine rice + asparagus",
      dinner: "2 lean beef patties (lettuce wrap) + roasted green beans + avocado",
    },
    note: "Back & biceps focus",
  },
  {
    day: "Wed",
    workout: {
      title: "Legs & Core",
      items: ["Back Squat — 5×5", "Romanian Deadlift — 4×8", "Walking Lunges — 3×12/leg", "Leg Press — 4×12", "Ab Rollouts — 3×12"],
    },
    meals: {
      breakfast,
      lunch: "8 oz chicken thighs + 1 baked potato + spinach salad",
      dinner: "8 oz cod/tilapia + cauliflower rice + grilled peppers",
    },
    note: "Heavy legs + core",
  },
  {
    day: "Thu",
    workout: {
      title: "Conditioning & Core",
      items: ["HIIT: 10× (30s sprint + 90s walk)", "Kettlebell Swings — 4×20", "Hanging Knee Tucks — 3×12", "Russian Twists — 3×20", "Side Plank — 3×30s/side"],
    },
    meals: {
      breakfast,
      lunch: "8 oz ground turkey + 1 cup basmati rice + mixed greens",
      dinner: "8 oz ribeye + roasted asparagus & mushrooms",
    },
    note: "Fat‑burn + abs",
  },
  {
    day: "Fri",
    workout: {
      title: "Push/Pull Hybrid (Hypertrophy)",
      items: ["Incline Bench — 4×10", "DB Shoulder Press — 3×12", "Lat Pulldown — 4×10", "Face Pulls — 3×15", "Cable Crunches — 3×15"],
    },
    meals: {
      breakfast,
      lunch: "8 oz chicken + 1 cup brown rice + green beans",
      dinner: "8 oz sirloin steak + zucchini noodles + tomato sauce",
    },
    note: "Volume + pump",
  },
  {
    day: "Sat",
    workout: {
      title: "Rest / Active Recovery",
      items: ["30–40 min walk", "Mobility / stretching", "Foam roll"],
    },
    meals: {
      breakfast,
      lunch: "8 oz salmon + 1 cup farro + roasted broccoli",
      dinner: "2 lean beef patties + sautéed peppers & onions",
    },
    note: "Light cardio & stretch",
  },
  {
    day: "Sun",
    workout: {
      title: "Rest / Recovery",
      items: ["Optional yoga", "Mobility", "Relax & recover"],
    },
    meals: {
      breakfast,
      lunch: "8 oz chicken + 1 cup wild rice + spinach + avocado",
      dinner: "8 oz cod + Brussels sprouts + mashed cauliflower",
    },
    note: "Full rest",
  },
];

const grocery = {
  Proteins: [
    "Eggs (35+)",
    "Chicken breast (5–6 lbs)",
    "Chicken thighs (2–3 lbs)",
    "Salmon (3–4 lbs)",
    "Cod or tilapia (2–3 lbs)",
    "Sirloin steak (4–5 lbs)",
    "Ribeye (2–3 lbs)",
    "Lean ground beef (3–4 lbs)",
    "Ground turkey (2–3 lbs)",
    "Greek yogurt (7–8 cups, plain)",
    "Cottage cheese (2–3 cups)",
    "Beef jerky (snacks)",
    "Whey protein powder",
  ],
  Carbs: [
    "Quinoa",
    "Brown rice",
    "Jasmine/Basmati rice",
    "Farro",
    "Wild rice",
    "Potatoes (white/red)",
  ],
  "Veggies & Greens": [
    "Spinach",
    "Broccoli",
    "Asparagus",
    "Zucchini",
    "Mushrooms",
    "Brussels sprouts",
    "Mixed greens",
    "Peppers & onions",
  ],
  Fruits: ["Blueberries", "Strawberries", "Lemons"],
  "Healthy Fats": ["Avocados", "Olive oil", "Almond butter", "Chia seeds", "Flax seeds", "Almonds or walnuts"],
};

const snackOptions = [
  "Protein shake (25g, post‑workout)",
  "Greek yogurt cup (20g)",
  "2 boiled eggs (12g)",
  "Cottage cheese (20g)",
  "Beef jerky (10–15g)",
  "Almonds/walnuts (~6g per oz)",
];

// Meal Prep Calculator
function MealPrepCalculator() {
  const [servings, setServings] = useState(1);
  const [selectedMeal, setSelectedMeal] = useState('lunch');
  
  const baseMeals = {
    lunch: "8 oz chicken + 1 cup quinoa + broccoli & zucchini + 1 tbsp olive oil",
    dinner: "8 oz sirloin steak + Brussels sprouts & mushrooms + side salad"
  };

  const calculateIngredients = (meal: string, multiplier: number) => {
    // Simple multiplier for common ingredients
    return meal.replace(/(\d+(?:\.\d+)?)\s*(oz|cup|tbsp)/g, (match, amount, unit) => {
      const newAmount = (parseFloat(amount) * multiplier).toFixed(1);
      return `${newAmount} ${unit}`;
    });
  };

  return (
    <Card className="shadow-lg bg-white/90 backdrop-blur border-orange-200">
      <CardHeader className="pb-2">
        <CardTitle className="text-lg text-orange-700 flex items-center gap-2">
          <Calculator className="w-5 h-5" />
          Meal Prep Calculator
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex items-center gap-4">
          <div className="flex items-center gap-2">
            <label className="text-sm font-medium">Servings:</label>
            <div className="flex items-center gap-1">
              <Button 
                size="sm" 
                variant="outline" 
                onClick={() => setServings(Math.max(1, servings - 1))}
                className="w-8 h-8 p-0"
              >
                <Minus className="w-3 h-3" />
              </Button>
              <span className="w-8 text-center font-bold">{servings}</span>
              <Button 
                size="sm" 
                variant="outline" 
                onClick={() => setServings(servings + 1)}
                className="w-8 h-8 p-0"
              >
                <Plus className="w-3 h-3" />
              </Button>
            </div>
          </div>
          <select 
            value={selectedMeal}
            onChange={(e) => setSelectedMeal(e.target.value)}
            className="px-3 py-1 border rounded-lg text-sm"
          >
            <option value="lunch">Lunch Recipe</option>
            <option value="dinner">Dinner Recipe</option>
          </select>
        </div>
        <div className="p-3 bg-orange-50 rounded-lg border border-orange-200">
          <p className="text-sm font-medium text-orange-800 mb-2">
            Recipe for {servings} serving{servings > 1 ? 's' : ''}:
          </p>
          <p className="text-sm text-orange-700">
            {calculateIngredients(baseMeals[selectedMeal as keyof typeof baseMeals], servings)}
          </p>
        </div>
      </CardContent>
    </Card>
  );
}

// Personal Notes Section
function PersonalNotes() {
  const [notes, setNotes] = useState(() => {
    if (typeof window !== 'undefined') {
      const saved = localStorage.getItem('daily-notes');
      const savedData = saved ? JSON.parse(saved) : { notes: '', date: new Date().toDateString() };
      // Keep notes for the same day
      if (savedData.date !== new Date().toDateString()) {
        return '';
      }
      return savedData.notes;
    }
    return '';
  });

  const updateNotes = (value: string) => {
    setNotes(value);
    if (typeof window !== 'undefined') {
      localStorage.setItem('daily-notes', JSON.stringify({
        notes: value,
        date: new Date().toDateString()
      }));
    }
  };

  return (
    <Card className="shadow-lg bg-white/90 backdrop-blur border-yellow-200">
      <CardHeader className="pb-2">
        <CardTitle className="text-lg text-yellow-700 flex items-center gap-2">
          <BookOpen className="w-5 h-5" />
          Daily Notes
        </CardTitle>
      </CardHeader>
      <CardContent>
        <textarea
          placeholder="How did today's workout feel? Any adjustments needed? Energy levels?"
          value={notes}
          onChange={(e) => updateNotes(e.target.value)}
          className="w-full h-24 p-3 border border-yellow-200 rounded-lg resize-none text-sm"
        />
        <p className="text-xs text-muted-foreground mt-2">
          Notes are saved automatically and reset daily
        </p>
      </CardContent>
    </Card>
  );
}

// Daily Habit Tracker
function DailyHabitTracker() {
  const [habits, setHabits] = useState(() => {
    if (typeof window !== 'undefined') {
      const saved = localStorage.getItem('daily-habits');
      const savedData = saved ? JSON.parse(saved) : { habits: {}, date: new Date().toDateString() };
      // Reset if it's a new day
      if (savedData.date !== new Date().toDateString()) {
        return {};
      }
      return savedData.habits;
    }
    return {};
  });

  const habitList = [
    { id: 'workout', label: '💪 Completed Workout', color: 'green' },
    { id: 'protein', label: '🥩 Hit Protein Target (190g+)', color: 'blue' },
    { id: 'water', label: '💧 Drank 3L+ Water', color: 'cyan' },
    { id: 'sleep', label: '😴 7+ Hours Sleep', color: 'purple' },
    { id: 'vegetables', label: '🥬 Ate Vegetables', color: 'emerald' }
  ];

  const toggleHabit = (habitId: string) => {
    const newHabits = { ...habits, [habitId]: !habits[habitId] };
    setHabits(newHabits);
    if (typeof window !== 'undefined') {
      localStorage.setItem('daily-habits', JSON.stringify({
        habits: newHabits,
        date: new Date().toDateString()
      }));
    }
  };

  const completedCount = Object.values(habits).filter(Boolean).length;
  const percentage = Math.round((completedCount / habitList.length) * 100);

  return (
    <Card className="shadow-lg bg-white/90 backdrop-blur border-purple-200">
      <CardHeader className="pb-2">
        <CardTitle className="text-lg text-purple-700 flex items-center gap-2">
          <Target className="w-5 h-5" />
          Daily Habits
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="text-center">
          <div className="text-2xl font-bold text-purple-600">
            {completedCount}/{habitList.length}
          </div>
          <p className="text-sm text-muted-foreground">habits completed today</p>
          <div className="w-full bg-purple-100 rounded-full h-2 mt-2">
            <div 
              className="bg-gradient-to-r from-purple-400 to-purple-600 h-2 rounded-full transition-all duration-300"
              style={{ width: `${percentage}%` }}
            ></div>
          </div>
          <p className="text-xs text-purple-600 mt-1">{percentage}% daily goal</p>
        </div>
        <div className="space-y-2">
          {habitList.map((habit) => (
            <label key={habit.id} className="flex items-center gap-3 p-3 rounded-lg hover:bg-gray-50 cursor-pointer min-h-[48px]">
              <Checkbox 
                checked={!!habits[habit.id]} 
                onCheckedChange={() => toggleHabit(habit.id)} 
                className="w-5 h-5"
              />
              <span className={`text-sm ${habits[habit.id] ? 'line-through text-muted-foreground' : ''}`}>
                {habit.label}
              </span>
            </label>
          ))}
        </div>
      </CardContent>
    </Card>
  );
}

// Workout Tracker with Completion Checkboxes and Weight Tracking
function WorkoutTracker() {
  const [completedWorkouts, setCompletedWorkouts] = useState(() => {
    if (typeof window !== 'undefined') {
      const saved = localStorage.getItem('workout-completions');
      const savedData = saved ? JSON.parse(saved) : { workouts: {}, date: new Date().toDateString() };
      // Reset if it's a new day
      if (savedData.date !== new Date().toDateString()) {
        return {};
      }
      return savedData.workouts;
    }
    return {};
  });

  const [workoutWeights, setWorkoutWeights] = useState(() => {
    if (typeof window !== 'undefined') {
      const saved = localStorage.getItem('workout-weights');
      return saved ? JSON.parse(saved) : {};
    }
    return {};
  });

  const toggleWorkout = (dayIndex: number, exerciseIndex: number) => {
    const key = `${dayIndex}-${exerciseIndex}`;
    const newCompletions = { ...completedWorkouts, [key]: !completedWorkouts[key] };
    setCompletedWorkouts(newCompletions);
    if (typeof window !== 'undefined') {
      localStorage.setItem('workout-completions', JSON.stringify({
        workouts: newCompletions,
        date: new Date().toDateString()
      }));
    }
  };

  const updateWeight = (dayIndex: number, exerciseIndex: number, weight: string) => {
    const key = `${dayIndex}-${exerciseIndex}`;
    const newWeights = { ...workoutWeights, [key]: weight };
    setWorkoutWeights(newWeights);
    if (typeof window !== 'undefined') {
      localStorage.setItem('workout-weights', JSON.stringify(newWeights));
    }
  };

  const today = new Date().getDay();
  const todayIndex = today === 0 ? 6 : today - 1; // Convert Sunday=0 to index 6
  const todayWorkout = days[todayIndex];

  return (
    <Card className="shadow-lg bg-white/90 backdrop-blur border-green-200">
      <CardHeader className="pb-2">
        <CardTitle className="text-lg text-green-700 flex items-center gap-2">
          <CheckSquare className="w-5 h-5" />
          Today's Workout: {todayWorkout.workout.title}
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-3">
        {todayWorkout.workout.items.map((exercise, index) => {
          const key = `${todayIndex}-${index}`;
          const isCompleted = !!completedWorkouts[key];
          const currentWeight = workoutWeights[key] || '';
          
          return (
            <div key={index} className="flex items-center gap-3 p-3 rounded-lg hover:bg-green-50 min-h-[52px]">
              <Checkbox 
                checked={isCompleted} 
                onCheckedChange={() => toggleWorkout(todayIndex, index)} 
                className="w-5 h-5"
              />
              <div className="flex-1">
                <span className={`text-sm ${isCompleted ? 'line-through text-muted-foreground' : ''}`}>
                  {exercise}
                </span>
              </div>
              <Input
                placeholder="Weight"
                value={currentWeight}
                onChange={(e) => updateWeight(todayIndex, index, e.target.value)}
                className="w-24 h-10 text-sm"
              />
            </div>
          );
        })}
        <div className="mt-4 p-3 bg-green-50 rounded-lg border border-green-200">
          <p className="text-sm text-green-700">
            <strong>Note:</strong> {todayWorkout.note}
          </p>
        </div>
      </CardContent>
    </Card>
  );
}

// Water Intake Tracker
function WaterTracker() {
  const [glasses, setGlasses] = useState(() => {
    if (typeof window !== 'undefined') {
      const saved = localStorage.getItem('water-intake');
      const savedData = saved ? JSON.parse(saved) : { count: 0, date: new Date().toDateString() };
      // Reset if it's a new day
      if (savedData.date !== new Date().toDateString()) {
        return 0;
      }
      return savedData.count;
    }
    return 0;
  });

  const addGlass = () => {
    const newCount = glasses + 1;
    setGlasses(newCount);
    if (typeof window !== 'undefined') {
      localStorage.setItem('water-intake', JSON.stringify({
        count: newCount,
        date: new Date().toDateString()
      }));
    }
  };

  const removeGlass = () => {
    if (glasses > 0) {
      const newCount = glasses - 1;
      setGlasses(newCount);
      if (typeof window !== 'undefined') {
        localStorage.setItem('water-intake', JSON.stringify({
          count: newCount,
          date: new Date().toDateString()
        }));
      }
    }
  };

  const targetGlasses = 12; // 3-4L = ~12 glasses
  const percentage = Math.min((glasses / targetGlasses) * 100, 100);

  return (
    <Card className="shadow-lg bg-white/90 backdrop-blur border-blue-200">
      <CardHeader className="pb-2">
        <CardTitle className="text-lg text-blue-700 flex items-center gap-2">
          <Droplets className="w-5 h-5" />
          Daily Water Intake
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="text-center">
          <div className="text-3xl font-bold text-blue-600">
            {glasses} / {targetGlasses}
          </div>
          <p className="text-sm text-muted-foreground">glasses (250ml each)</p>
          <div className="w-full bg-blue-100 rounded-full h-3 mt-2">
            <div 
              className="bg-gradient-to-r from-blue-400 to-blue-600 h-3 rounded-full transition-all duration-300"
              style={{ width: `${percentage}%` }}
            ></div>
          </div>
          <p className="text-xs text-blue-600 mt-1">{Math.round(percentage)}% of daily goal</p>
        </div>
        <div className="flex gap-2 justify-center">
          <Button onClick={addGlass} className="rounded-2xl bg-blue-500 hover:bg-blue-600">
            + Add Glass
          </Button>
          <Button onClick={removeGlass} variant="outline" className="rounded-2xl border-blue-300">
            - Remove
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}

// Workout Timer Component
function WorkoutTimer() {
  const [time, setTime] = useState(0);
  const [isRunning, setIsRunning] = useState(false);
  const [timerType, setTimerType] = useState<'workout' | 'rest'>('workout');

  React.useEffect(() => {
    let interval: NodeJS.Timeout;
    if (isRunning) {
      interval = setInterval(() => {
        setTime(time => time + 1);
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [isRunning]);

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const reset = () => {
    setTime(0);
    setIsRunning(false);
  };

  return (
    <Card className="shadow-lg bg-white/90 backdrop-blur border-green-200">
      <CardHeader className="pb-2">
        <CardTitle className="text-lg text-green-700 flex items-center gap-2">
          <Timer className="w-5 h-5" />
          Workout Timer
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="text-center">
          <div className={`text-4xl font-mono font-bold ${timerType === 'workout' ? 'text-green-600' : 'text-blue-600'}`}>
            {formatTime(time)}
          </div>
          <p className="text-sm text-muted-foreground mt-1">
            {timerType === 'workout' ? '💪 Workout Time' : '😌 Rest Time'}
          </p>
        </div>
        <div className="flex gap-2 justify-center">
          <Button 
            onClick={() => setIsRunning(!isRunning)}
            className={`rounded-2xl ${timerType === 'workout' ? 'bg-green-500 hover:bg-green-600' : 'bg-blue-500 hover:bg-blue-600'}`}
          >
            {isRunning ? 'Pause' : 'Start'}
          </Button>
          <Button onClick={reset} variant="outline" className="rounded-2xl">
            Reset
          </Button>
          <Button 
            onClick={() => setTimerType(timerType === 'workout' ? 'rest' : 'workout')}
            variant="secondary"
            className="rounded-2xl"
          >
            Switch to {timerType === 'workout' ? 'Rest' : 'Workout'}
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}

// ---------------------------------------------
// 🧩 UI Components
// ---------------------------------------------
const SectionHeader: React.FC<{ icon?: React.ReactNode; title: string; desc?: string; cta?: React.ReactNode }> = ({ icon, title, desc, cta }) => {
  return (
    <div className="flex items-start justify-between gap-4">
      <div className="flex items-center gap-3">
        <div className="p-2 rounded-2xl bg-gradient-to-r from-green-100 to-blue-100">{icon}</div>
        <div>
          <h2 className="text-xl font-semibold leading-tight">{title}</h2>
          {desc && <p className="text-sm text-muted-foreground mt-1">{desc}</p>}
        </div>
      </div>
      {cta}
    </div>
  );
};

const PrintButton = ({ label = "Print this section" }: { label?: string }) => (
  <Button variant="secondary" onClick={() => window.print()} className="rounded-2xl bg-gradient-to-r from-blue-500 to-purple-600 text-white hover:from-blue-600 hover:to-purple-700 shadow-lg">🖨️ {label}</Button>
);

const DownloadButton = ({ href, label }: { href: string; label: string }) => (
  <a href={href} target="_blank" rel="noreferrer">
    <Button className="rounded-2xl bg-gradient-to-r from-green-500 to-emerald-600 text-white hover:from-green-600 hover:to-emerald-700 shadow-lg" variant="default"><Download className="w-4 h-4 mr-2" /> {label}</Button>
  </a>
);

// Weekly table component
function WeeklyTable() {
  return (
    <Card className="shadow-lg bg-white/90 backdrop-blur border-green-200">
      <CardHeader className="pb-2">
        <CardTitle className="text-lg text-green-700">Weekly Plan (Meals + Workouts)</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Day</TableHead>
                <TableHead>Workout</TableHead>
                <TableHead>Breakfast</TableHead>
                <TableHead>Lunch</TableHead>
                <TableHead>Dinner</TableHead>
                <TableHead>Notes</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {days.map((d) => (
                <TableRow key={d.day}>
                  <TableCell className="font-medium">{d.day}</TableCell>
                  <TableCell>
                    <div className="font-semibold">{d.workout.title}</div>
                    <ul className="list-disc ml-5 text-xs mt-1 space-y-0.5">
                      {d.workout.items.map((w) => (
                        <li key={w}>{w}</li>
                      ))}
                    </ul>
                  </TableCell>
                  <TableCell>{d.meals.breakfast}</TableCell>
                  <TableCell>{d.meals.lunch}</TableCell>
                  <TableCell>{d.meals.dinner}</TableCell>
                  <TableCell>{d.note}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      </CardContent>
    </Card>
  );
}

function QuickView() {
  const rows = days.map((d) => ({ day: d.day, workout: d.workout.title, meals: `Breakfast: Eggs+Yogurt · Lunch: ${d.meals.lunch.split(" + ")[0]} · Dinner: ${d.meals.dinner.split(" + ")[0]}` }));
  return (
    <Card className="shadow-lg bg-white/90 backdrop-blur border-blue-200">
      <CardHeader className="pb-2"><CardTitle className="text-lg text-blue-700">Quick View (Gym‑Friendly)</CardTitle></CardHeader>
      <CardContent>
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Day</TableHead>
                <TableHead>Workout</TableHead>
                <TableHead>Meals (short)</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {rows.map((r) => (
                <TableRow key={r.day}>
                  <TableCell className="font-medium">{r.day}</TableCell>
                  <TableCell>{r.workout}</TableCell>
                  <TableCell>{r.meals}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      </CardContent>
    </Card>
  );
}

function CalendarView() {
  return (
    <Card className="shadow-lg bg-white/90 backdrop-blur border-purple-200">
      <CardHeader className="pb-2">
        <CardTitle className="text-lg text-purple-700">Calendar View (4 Weeks, Minimalist)</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-7 gap-3 text-sm">
          {["Mon","Tue","Wed","Thu","Fri","Sat","Sun"].map((h) => (
            <div key={h} className="text-center font-semibold text-muted-foreground">{h}</div>
          ))}
          {days.map((d, index) => (
            <div key={d.day} className={`rounded-2xl border-2 p-3 min-h-[120px] ${
              index % 7 === 0 ? 'border-red-200 bg-red-50' :
              index % 7 === 1 ? 'border-orange-200 bg-orange-50' :
              index % 7 === 2 ? 'border-yellow-200 bg-yellow-50' :
              index % 7 === 3 ? 'border-green-200 bg-green-50' :
              index % 7 === 4 ? 'border-blue-200 bg-blue-50' :
              index % 7 === 5 ? 'border-indigo-200 bg-indigo-50' :
              'border-purple-200 bg-purple-50'
            }`}
              <div className="font-semibold">{d.workout.title.split(" ")[0]}{d.workout.title.includes("Conditioning") ? " (Cond/Core)" : ""}</div>
              <Separator className="my-2" />
              <div className="space-y-1">
                <div><span className="font-medium">Breakfast:</span> Eggs + Yogurt</div>
                <div><span className="font-medium">Lunch:</span> {d.meals.lunch.split(" + ")[0]} + carb + veg</div>
                <div><span className="font-medium">Dinner:</span> {d.meals.dinner.split(" + ")[0]} + veg</div>
              </div>
            </div>
          ))}
        </div>
        <p className="text-xs text-muted-foreground mt-3">Snacks as needed: protein shake, Greek yogurt, cottage cheese, jerky, boiled eggs.</p>
      </CardContent>
    </Card>
  );
}

function GroceryList() {
  const [checked, setChecked] = useState<Record<string, boolean>>(() => {
    if (typeof window !== 'undefined') {
      const saved = localStorage.getItem('grocery-checklist');
      return saved ? JSON.parse(saved) : {};
    }
    return {};
  });
  
  const toggle = (key: string) => {
    const newChecked = { ...checked, [key]: !checked[key] };
    setChecked(newChecked);
    if (typeof window !== 'undefined') {
      localStorage.setItem('grocery-checklist', JSON.stringify(newChecked));
    }
  };

  const clearAll = () => {
    setChecked({});
    if (typeof window !== 'undefined') {
      localStorage.removeItem('grocery-checklist');
    }
  };

  const checkedCount = Object.values(checked).filter(Boolean).length;
  const totalCount = Object.values(grocery).flat().length;

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between p-4 bg-gradient-to-r from-orange-100 to-yellow-100 rounded-2xl border-2 border-orange-200">
        <div className="flex items-center gap-3">
          <Target className="w-5 h-5 text-orange-600" />
          <span className="font-semibold text-orange-800">
            Progress: {checkedCount}/{totalCount} items ({Math.round((checkedCount/totalCount) * 100)}%)
          </span>
        </div>
        <Button 
          onClick={clearAll} 
          variant="outline" 
          size="sm"
          className="border-orange-300 text-orange-700 hover:bg-orange-50"
        >
          Clear All
        </Button>
      </div>
      <div className="grid md:grid-cols-2 gap-4">
      {Object.entries(grocery).map(([cat, items]) => (
        <Card key={cat} className="shadow-lg bg-white/90 backdrop-blur border-orange-200">
          <CardHeader className="pb-2"><CardTitle className="text-lg text-orange-700">{cat}</CardTitle></CardHeader>
          <CardContent className="space-y-2">
            {items.map((item) => (
              <label key={item} className="flex items-center gap-3 text-sm p-2 rounded-lg hover:bg-gray-50 cursor-pointer min-h-[44px]">
                <Checkbox checked={!!checked[item]} onCheckedChange={() => toggle(item)} className="w-5 h-5" />
                <span className={checked[item] ? "line-through text-muted-foreground" : ""}>{item}</span>
              </label>
            ))}
          </CardContent>
        </Card>
      ))}
    </div>
  );
}

function Trackers() {
  const weekRows = days.map((d) => ({ day: d.day, workout: d.workout.title }));
  return (
    <div className="space-y-4">
      <Card className="shadow-lg bg-white/90 backdrop-blur border-indigo-200">
        <CardHeader className="pb-2 flex flex-row items-center justify-between">
          <CardTitle className="text-lg text-indigo-700">Weekly Tracking Sheet</CardTitle>
          <PrintButton />
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Day</TableHead>
                  <TableHead>Workout</TableHead>
                  <TableHead>Breakfast</TableHead>
                  <TableHead>Lunch</TableHead>
                  <TableHead>Dinner</TableHead>
                  <TableHead>Snacks</TableHead>
                  <TableHead>Notes</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {weekRows.map((r) => (
                  <TableRow key={r.day}>
                    <TableCell className="font-medium">{r.day}</TableCell>
                    <TableCell>{r.workout}</TableCell>
                    <TableCell>☐</TableCell>
                    <TableCell>☐</TableCell>
                    <TableCell>☐</TableCell>
                    <TableCell>☐</TableCell>
                    <TableCell></TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>

      <Card className="shadow-lg bg-white/90 backdrop-blur border-pink-200">
        <CardHeader className="pb-2"><CardTitle className="text-lg text-pink-700">Snack Options</CardTitle></CardHeader>
        <CardContent className="grid md:grid-cols-2 gap-2">
          {snackOptions.map((s) => (
            <div key={s} className="text-sm">• {s}</div>
          ))}
        </CardContent>
      </Card>
    </div>
  );
}

function Downloads() {
  return (
    <div className="grid md:grid-cols-2 xl:grid-cols-3 gap-4">
      {pdfLinks.map((f) => (
        <Card key={f.name} className="shadow-lg bg-white/90 backdrop-blur border-teal-200">
          <CardHeader className="pb-2"><CardTitle className="text-base flex items-center gap-2 text-teal-700"><FileText className="w-4 h-4 text-teal-600"/> {f.name}</CardTitle></CardHeader>
          <CardContent className="flex items-center justify-between">
            <p className="text-xs text-muted-foreground pr-2">Opens as a PDF.</p>
            <DownloadButton href={f.href} label="Download" />
          </CardContent>
        </Card>
      ))}
      <Card className="shadow-lg bg-white/90 backdrop-blur border-gray-200">
        <CardHeader className="pb-2"><CardTitle className="text-base text-gray-700">How to host these PDFs</CardTitle></CardHeader>
        <CardContent className="text-sm text-muted-foreground space-y-2">
          <p>These links work inside ChatGPT. To deploy this site elsewhere, place the PDF files in your <code>/public</code> folder and update the <code>pdfLinks</code> array to point to <code>/your-file.pdf</code>.</p>
          <p>Or remove the downloads section and rely on the on‑page views + browser print as PDF.</p>
        </CardContent>
      </Card>
    </div>
  );
}

// ---------------------------------------------
// 🌐 Page Layout
// ---------------------------------------------
export default function SixPackSite() {
  const [searchTerm, setSearchTerm] = useState('');
  const [showMobileMenu, setShowMobileMenu] = useState(false);

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 via-blue-50 to-purple-50">
      {/* Header / Hero */}
      <header className="sticky top-0 z-30 backdrop-blur supports-[backdrop-filter]:bg-white/80 border-b border-green-200 shadow-sm">
        <div className="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="rounded-2xl p-2 bg-gradient-to-r from-green-500 to-emerald-600 text-white shadow-lg"><Dumbbell className="w-5 h-5"/></div>
            <div>
              <h1 className="text-lg font-semibold leading-none">Six‑Pack Transformation Program</h1>
              <p className="text-xs text-muted-foreground">Custom plan for 6'3", 187 lbs • 5 workouts/week (4 Lifting + 1 Conditioning)</p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <div className="hidden md:flex items-center gap-2 mr-4">
              <div className="relative">
                <Search className="w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                <Input 
                  placeholder="Search workouts, meals..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10 w-64 rounded-2xl border-green-200"
                />
              </div>
            </div>
            <DownloadButton href={pdfLinks[0].href} label="Download Master PDF" />
            <Button variant="outline" className="rounded-2xl border-2 border-blue-300 text-blue-700 hover:bg-blue-50 shadow-md" onClick={() => window.print()}>🖨️ Print</Button>
            <Button 
              variant="outline" 
              className="md:hidden rounded-2xl border-2 border-green-300 text-green-700 hover:bg-green-50"
              onClick={() => setShowMobileMenu(!showMobileMenu)}
            >
              <Menu className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </header>

      {/* Content */}
      <main className="max-w-6xl mx-auto p-4 md:p-6 space-y-6">
        <Card className="shadow-lg border-0 bg-white/80 backdrop-blur">
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="text-xl bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent">Overview</CardTitle>
              <div className="flex items-center gap-2 text-sm">
                <TrendingUp className="w-4 h-4 text-green-600" />
                <span className="text-green-700 font-semibold">Week 1 of 12</span>
              </div>
            </div>
          </CardHeader>
          <CardContent className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="rounded-2xl border-2 border-green-200 p-4 bg-gradient-to-br from-green-50 to-emerald-50">
              <SectionHeader icon={<Dumbbell className="text-green-600" />} title="Training Split" desc="5 days/week: 4 lifting + 1 conditioning & core" />
              <ul className="list-disc ml-5 mt-3 text-sm space-y-1 text-green-800">
                <li>Mon: Push</li>
                <li>Tue: Pull</li>
                <li>Wed: Legs & Core</li>
                <li>Thu: Conditioning & Core</li>
                <li>Fri: Push/Pull Hybrid</li>
                <li>Sat: Active Recovery</li>
                <li>Sun: Rest</li>
              </ul>
            </div>
            <div className="rounded-2xl border-2 border-blue-200 p-4 bg-gradient-to-br from-blue-50 to-cyan-50">
              <SectionHeader icon={<Salad className="text-blue-600" />} title="Nutrition Targets" desc="~2,400 kcal • 190–200g protein/day" />
              <ul className="list-disc ml-5 mt-3 text-sm space-y-1 text-blue-800">
                <li>Breakfast daily: eggs + Greek yogurt (no egg whites)</li>
                <li>50–60g protein per main meal</li>
                <li>Carbs higher on lift days, lower on rest days</li>
                <li>Hydration: 3–4L/day • Sleep: 7–8h</li>
              </ul>
            </div>
            <div className="rounded-2xl border-2 border-purple-200 p-4 bg-gradient-to-br from-purple-50 to-pink-50">
              <SectionHeader icon={<CalendarDays className="text-purple-600" />} title="Tools" desc="Use Downloads or Print each section" />
              <ul className="list-disc ml-5 mt-3 text-sm space-y-1 text-purple-800">
                <li>Weekly plan & quick views</li>
                <li>Grocery checklist</li>
                <li>Trackers (weekly / 4‑week / 12‑week)</li>
                <li>Calendar (4‑week minimalist)</li>
              </ul>
            </div>
          </CardContent>
        </Card>

        <Tabs defaultValue="weekly" className="space-y-4">
          <TabsList className="grid grid-cols-2 md:grid-cols-7 gap-2 bg-gradient-to-r from-green-100 to-blue-100 p-1 rounded-2xl shadow-md">
            <TabsTrigger value="weekly">Weekly Plan</TabsTrigger>
            <TabsTrigger value="quick">Quick View</TabsTrigger>
            <TabsTrigger value="calendar">Calendar</TabsTrigger>
            <TabsTrigger value="grocery">Grocery</TabsTrigger>
            <TabsTrigger value="tools">Tools</TabsTrigger>
            <TabsTrigger value="track">Trackers</TabsTrigger>
            <TabsTrigger value="download">Downloads</TabsTrigger>
          </TabsList>

          <TabsContent value="weekly" className="space-y-3">
            <SectionHeader icon={<Dumbbell />} title="Weekly Plan" desc="Meals + workouts for each day" cta={<PrintButton />} />
            <WeeklyTable />
          </TabsContent>

          <TabsContent value="quick" className="space-y-3">
            <SectionHeader icon={<CheckSquare />} title="Quick View" desc="Short meal labels for gym use" cta={<PrintButton />} />
            <QuickView />
          </TabsContent>

          <TabsContent value="calendar" className="space-y-3">
            <SectionHeader icon={<CalendarDays />} title="Calendar (4 weeks)" desc="Minimalist overview" cta={<PrintButton />} />
            <CalendarView />
          </TabsContent>

          <TabsContent value="grocery" className="space-y-3">
            <SectionHeader icon={<ListChecks />} title="Grocery Checklist" desc="Tap to tick items (not saved after refresh)" cta={<PrintButton />} />
            <GroceryList />
          </TabsContent>

          <TabsContent value="tools" className="space-y-3">
            <SectionHeader icon={<Settings />} title="Fitness Tools" desc="Interactive tools for daily tracking" />
            <div className="grid md:grid-cols-2 gap-4">
              <WorkoutTracker />
              <DailyHabitTracker />
              <WorkoutTimer />
              <WaterTracker />
              <MealPrepCalculator />
              <PersonalNotes />
            </div>
          </TabsContent>

          <TabsContent value="track" className="space-y-3">
            <SectionHeader icon={<FileText />} title="Trackers" desc="Print and check off daily meals & workouts" cta={<PrintButton />} />
            <Trackers />
          </TabsContent>

          <TabsContent value="download" className="space-y-3">
            <SectionHeader icon={<Download />} title="Downloads" desc="PDFs matching all sections" />
            <Downloads />
          </TabsContent>
        </Tabs>

        <Card className="shadow-lg bg-white/90 backdrop-blur border-yellow-200">
          <CardContent className="text-xs text-yellow-800 p-4">
            <p><strong>Disclaimer:</strong> This plan is general fitness guidance. Consult a healthcare professional before starting any new diet or training program, especially if you have medical conditions.</p>
          </CardContent>
        </Card>
      </main>

      <footer className="border-t">
        <div className="max-w-6xl mx-auto px-4 py-4 text-xs text-muted-foreground flex items-center justify-between">
          <span>Six‑Pack Program • 5‑day split • ~200g protein/day</span>
          <span className="flex items-center gap-1"><Sun className="w-3 h-3"/> Built for consistency & clarity</span>
        </div>
      </footer>

      {/* Mobile Search Menu */}
      {showMobileMenu && (
        <div className="fixed inset-0 bg-black/50 z-40 md:hidden" onClick={() => setShowMobileMenu(false)}>
          <div className="fixed top-0 right-0 w-80 h-full bg-white shadow-2xl p-4" onClick={(e) => e.stopPropagation()}>
            <div className="flex items-center justify-between mb-4">
              <h3 className="font-semibold">Quick Access</h3>
              <Button variant="ghost" size="sm" onClick={() => setShowMobileMenu(false)}>✕</Button>
            </div>
            <div className="space-y-4">
              <div className="relative">
                <Search className="w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                <Input 
                  placeholder="Search workouts, meals..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10 rounded-2xl border-green-200"
                />
              </div>
              <div className="space-y-2">
                <Button className="w-full justify-start" variant="ghost" onClick={() => {
                  const today = new Date().getDay();
                  const dayIndex = today === 0 ? 6 : today - 1;
                  const todayWorkout = days[dayIndex];
                  alert(`Today's Workout: ${todayWorkout.workout.title}\n\nExercises:\n${todayWorkout.workout.items.join('\n')}`);
                  setShowMobileMenu(false);
                }}>
                  💪 Today's Workout
                </Button>
                <Button className="w-full justify-start" variant="ghost" onClick={() => setShowMobileMenu(false)}>
                  📊 Progress Tracking
                </Button>
                <Button className="w-full justify-start" variant="ghost" onClick={() => setShowMobileMenu(false)}>
                  🛒 Grocery List
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Floating Action Button */}
      <div className="fixed bottom-6 right-6 z-50">
        <div className="flex flex-col gap-2 items-end">
          <Button 
            className="rounded-full w-14 h-14 bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 shadow-2xl"
            onClick={() => {
              const today = new Date().getDay();
              const dayIndex = today === 0 ? 6 : today - 1; // Convert Sunday=0 to index 6
              const todayWorkout = days[dayIndex];
              alert(`Today's Workout: ${todayWorkout.workout.title}\n\nExercises:\n${todayWorkout.workout.items.join('\n')}`);
            }}
          >
            <Dumbbell className="w-6 h-6" />
          </Button>
          <div className="text-xs text-center text-white bg-black/70 px-2 py-1 rounded-lg">
            Today's<br/>Workout
          </div>
        </div>
      </div>
    </div>
  );
}